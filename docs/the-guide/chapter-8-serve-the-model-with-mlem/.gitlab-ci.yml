stages:
  - train
  - report

variables:
  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # https://dvc.org/doc/user-guide/troubleshooting?tab=GitLab-CI-CD#git-shallow
  GIT_DEPTH: "0"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
cache:
  paths:
    - .cache/pip

train:
  stage: train
  image: iterativeai/cml:0-dvc2-base1
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    # Set the path to Google Service Account key for DVC - https://dvc.org/doc/command-reference/remote/add#google-cloud-storage
    GOOGLE_APPLICATION_CREDENTIALS: "${CI_PROJECT_DIR}/google-service-account-key.json"
  before_script:
    # Set the Google Service Account key
    - echo "${GCP_SERVICE_ACCOUNT_KEY}" | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    # Install Poetry
    - pip install poetry==1.4.0
    # Install dependencies
    - poetry install
    # Enable Poetry virtual environment
    - source `poetry env info --path`/bin/activate
  script:
    # Pull data from DVC
    - dvc pull
    # Run the experiment
    - dvc repro

report:
  stage: report
  image: iterativeai/cml:0-dvc2-base1
  needs:
    - train
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    # Set the path to Google Service Account key for DVC - https://dvc.org/doc/command-reference/remote/add#google-cloud-storage
    GOOGLE_APPLICATION_CREDENTIALS: "${CI_PROJECT_DIR}/google-service-account-key.json"
    REPO_TOKEN: $CML_PAT
  before_script:
    # Set the Google Service Account key
    - echo "${GCP_SERVICE_ACCOUNT_KEY}" | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
  script:
    - |
      # Compare parameters to main branch
      echo "# Params workflow vs. main" >> report.md
      echo >> report.md
      dvc params diff main --show-md >> report.md
      echo >> report.md

      # Compare metrics to main branch
      echo "# Metrics workflow vs. main" >> report.md
      echo >> report.md
      dvc metrics diff main --show-md >> report.md
      echo >> report.md

      # Create plots
      echo "# Plots" >> report.md
      echo >> report.md

      echo "## Precision recall curve" >> report.md
      echo >> report.md
      dvc plots diff \
        --target evaluation/plots/prc.json \
        -x recall \
        -y precision \
        --show-vega main > vega.json
      vl2png vega.json > prc.png
      echo '![](./prc.png "Precision recall curve")' >> report.md
      echo >> report.md

      echo "## Roc curve" >> report.md
      echo >> report.md
      dvc plots diff \
        --target evaluation/plots/sklearn/roc.json \
        -x fpr \
        -y tpr \
        --show-vega main > vega.json
      vl2png vega.json > roc.png
      echo '![](./roc.png "Roc curve")' >> report.md
      echo >> report.md

      echo "## Confusion matrix" >> report.md
      echo >> report.md
      dvc plots diff \
        --target evaluation/plots/sklearn/confusion_matrix.json \
        --template confusion \
        -x actual \
        -y predicted \
        --show-vega main > vega.json
      vl2png vega.json > confusion_matrix.png
      echo '![](./confusion_matrix.png "Confusion Matrix")' >> report.md
      echo >> report.md

      echo "## Importance" >> report.md
      echo >> report.md
      dvc plots diff --target evaluation/plots/importance.png -- main
      echo '![](./dvc_plots/static/main_evaluation_plots_importance.png "Importance (main)")' >> report.md
      echo >> report.md
      echo '![](./dvc_plots/static/workspace_evaluation_plots_importance.png "Importance (workspace)")' >> report.md
      echo >> report.md

      # Publish the CML report
      cml comment update --target=pr --publish report.md
