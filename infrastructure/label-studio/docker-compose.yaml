networks:
  label-studio:
    name: label-studio
  postgresql:
    name: postgresql
  traefik:
    name: traefik

services:
  label-studio:
    container_name: label-studio
    image: heartexlabs/label-studio:${LABEL_STUDIO_IMAGE_VERSION:-latest}
    restart: unless-stopped
    depends_on:
      - label-studio-db
    env_file:
      - label-studio.env
    networks:
      - label-studio
      - postgresql
      - traefik
    ports:
      - 8080:8080
    environment:
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_FQDN}
    volumes:
      - ./label-studio-data:/label-studio/data:rw
    labels:
      # Traefik
      - traefik.enable=true
      - traefik.docker.network=traefik
      # HTTP
      - traefik.http.routers.label-studio-http.rule=Host(`${LABEL_STUDIO_FQDN}`)
      - traefik.http.routers.label-studio-http.entrypoints=web
      - traefik.http.routers.label-studio-http.middlewares=redirect-to-https
      # HTTPS
      - traefik.http.routers.label-studio-https.rule=Host(`${LABEL_STUDIO_FQDN}`)
      - traefik.http.routers.label-studio-https.entrypoints=websecure
      - traefik.http.routers.label-studio-https.tls=true
      - traefik.http.routers.label-studio-https.tls.certresolver=letsencrypt
      # Service
      - traefik.http.services.label-studio.loadbalancer.server.port=8080

  label-studio-db:
    container_name: label-studio-db
    image: postgres:${POSTGRES_IMAGE_VERSION:-latest}
    restart: unless-stopped
    env_file:
      - postgresql.env
    command: postgres -c 'max_connections=1000'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - postgresql
    ports:
      - 5432:5432
    volumes:
      - ./db-data:/var/lib/postgresql/data:rw
