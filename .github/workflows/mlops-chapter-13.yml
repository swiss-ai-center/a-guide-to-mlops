name: MLOps Chapter 13

on:
  # Runs on pushes targeting main branch
  push:
    branches:
      - main
    paths:
      - .github/workflows/mlops-chapter-13.yml
      - docs/part-3-serve-and-deploy-the-model-online/chapter-13-train-the-model-on-a-kubernetes-pod-with-cml/**/*

  # Runs on pull requests
  pull_request:
    paths:
      - .github/workflows/mlops-chapter-13.yml
      - docs/part-3-serve-and-deploy-the-model-online/chapter-13-train-the-model-on-a-kubernetes-pod-with-cml/**/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CWD: docs/part-3-serve-and-deploy-the-model-online/chapter-13-train-the-model-on-a-kubernetes-pod-with-cml

# Allow the creation and usage of self-hosted runners
permissions:
  contents: read
  id-token: write

jobs:
  setup-runner:
    runs-on: ubuntu-latest
    # container: iterativeai/cml:0-dvc2-base1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      ### begin official CML
      - uses: iterative/setup-cml@v1
        with:
          version: '0.19.0'
      ### end official CML
      ### begin custom CML
      # - name: Clone CML
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ludelafo/cml
      #     ref: add-support-for-kubernetes-arbitrary-node-selector
      #     path: cml
      # - name: Clone TPI
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ludelafo/terraform-provider-iterative
      #     ref: add-support-for-kubernetes-arbitrary-node-selector
      #     path: tpi
      # - name: Setup Node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 16
      #     cache: 'npm'
      #     cache-dependency-path: 'cml/package-lock.json'
      # - name: Setup Go
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: ^1.18.0
      #     cache-dependency-path: 'tpi/go.sum'
      # - name: CML deps
      #   working-directory: cml
      #   run: |
      #     npm ci
      # - name: Hack cml for local tpi
      #   working-directory: cml
      #   run: |
      #     sed -i "s/source: 'iterative\/iterative',/source: 'github.com\/iterative\/iterative'/g" src/terraform.js
      #     sed -i "/...(tpiVersion && { version: tpiVersion })/d" src/terraform.js
      # - name: Install CML
      #   working-directory: cml
      #   run: |
      #     npm install -g .
      # - name: Install misc CML tooling
      #   run: |
      #     npm install -g canvas@2 vega@5 vega-cli@5 vega-lite@5
      # - name: Build/Install TPI
      #   working-directory: tpi
      #   run: |
      #     make build
      #     make install-tpi
      ### end custom CML
      - name: Login to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
      - name: Get Google Cloud's Kubernetes credentials
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'mlops-kubernetes'
          location: 'europe-west6-a'
      - name: Initialize runner on Kubernetes
        env:
          REPO_TOKEN: ${{ secrets.CML_PAT }}
        run: |
          export KUBERNETES_CONFIGURATION=$(cat $KUBECONFIG)
          # https://cml.dev/doc/ref/runner
          # https://registry.terraform.io/providers/iterative/iterative/latest/docs/resources/task#machine-type
          # https://registry.terraform.io/providers/iterative/iterative/latest/docs/resources/task#{cpu}-{memory}
          cml runner \
            --labels="cml-runner" \
            --cloud="kubernetes" \
            --cloud-type="1-2000" \
            --cloud-kubernetes-node-selector="gpu=true" \
            --single

  train:
    needs: setup-runner
    runs-on: [self-hosted, cml-runner]
    timeout-minutes: 50400 # 35 days
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install poetry
        run: pip install poetry==1.4.0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - name: Install dependencies
        working-directory: ${{ env.CWD }}
        run: poetry install
      - name: Login to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
      - name: Train model
        working-directory: ${{ env.CWD }}
        run: |
          # Pull data from DVC
          poetry run dvc pull
          # Run the experiment
          poetry run dvc repro --force

  report:
    needs: train
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Setup DVC
        uses: iterative/setup-dvc@v1
        with:
          version: '2.37.0'
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Setup CML
        uses: iterative/setup-cml@v1
        with:
          version: '0.19.0'
      - name: Create CML report
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ env.CWD }}
        run: |
          # Fetch all other Git branches
          git fetch --depth=1 origin main:main

          # Compare parameters to main branch
          echo "# Params workflow vs. main" >> report.md
          echo >> report.md
          dvc params diff main --show-md >> report.md
          echo >> report.md

          # Compare metrics to main branch
          echo "# Metrics workflow vs. main" >> report.md
          echo >> report.md
          dvc metrics diff main --show-md >> report.md
          echo >> report.md

          # Create plots
          echo "# Plots" >> report.md
          echo >> report.md

          echo "## Precision recall curve" >> report.md
          echo >> report.md
          dvc plots diff \
            --target evaluation/plots/prc.json \
            -x recall \
            -y precision \
            --show-vega main > vega.json
          vl2png vega.json > prc.png
          echo '![](./prc.png "Precision recall curve")' >> report.md
          echo >> report.md

          echo "## Roc curve" >> report.md
          echo >> report.md
          dvc plots diff \
            --target evaluation/plots/sklearn/roc.json \
            -x fpr \
            -y tpr \
            --show-vega main > vega.json
          vl2png vega.json > roc.png
          echo '![](./roc.png "Roc curve")' >> report.md
          echo >> report.md

          echo "## Confusion matrix" >> report.md
          echo >> report.md
          dvc plots diff \
            --target evaluation/plots/sklearn/confusion_matrix.json \
            --template confusion \
            -x actual \
            -y predicted \
            --show-vega main > vega.json
          vl2png vega.json > confusion_matrix.png
          echo '![](./confusion_matrix.png "Confusion Matrix")' >> report.md
          echo >> report.md

          echo "## Importance" >> report.md
          echo >> report.md
          dvc plots diff --target evaluation/plots/importance.png -- main
          echo '![](./dvc_plots/static/main_evaluation_plots_importance.png "Importance (main)")' >> report.md
          echo >> report.md
          echo '![](./dvc_plots/static/workspace_evaluation_plots_importance.png "Importance (workspace)")' >> report.md
          echo >> report.md

          # Publish the CML report
          cml comment update --target=pr --publish report.md/
